
//
//	Virtual Robotics 1.0
//	Anthropomorphic Hand parts
//
//	class AnthroThumb( left, filename, length=1.4 )
//	class AnthroPalm( left, filename, length=1.4 )
//


import { ConvexGeometry } from "../../libs/geometries/ConvexGeometry.js";
import { GLTFPart} from "../parts/gltf.js";
import { getScene } from "../scene.js";
import * as PHYSICS from "../physics.js";


// generated by obj-reader.html
const VERTICES = {
//ignored on purpose	'anthro-thumb.glb': [[-0.15,-0.37,0.11],[-0.15,-0.03,0.29],[-0.15,-0.25,-0.19],[-0.15,-0.16,-0.25],[0.14,-0.37,0.11],[0.14,-0.03,0.29],[0.14,-0.25,-0.19],[0.14,-0.16,-0.25],[0.14,-0.34,-0.04],[-0.15,-0.35,-0.03]],
	'anthro-palm.glb': [[-0.65,-0.55,0.14],[-0.81,-0.21,0.14],[-0.65,-0.55,-0.14],[-0.81,-0.21,-0.14],[0.52,-0.56,0.14],[0.67,-0.16,0.14],[0.52,-0.56,-0.14],[0.67,-0.16,-0.14],[-0.72,0.61,0.14],[-0.36,0.81,0.14],[-0.29,0.68,-0.14],[-0.72,0.55,-0.14],[0.22,0.88,0.14],[0.7,0.58,0.14],[0.25,0.71,-0.14],[0.7,0.56,-0.14],[-0.26,-0.86,0.14],[-0.26,-0.86,-0.14],[0.23,-0.86,0.14],[0.23,-0.86,-0.14],[0.64,0.68,-0.14],[0.6,0.81,0.14],[-0.64,0.69,0.14],[-0.58,0.6,-0.14]],
}

// generated by obj-reader.html
const FACES = {
//ignored on purpose	'anthro-thumb.glb': [[0,1,3,2,9],[2,3,7,6],[6,7,5,4,8],[4,5,1,0],[2,6,8,9],[7,3,1,5],[9,8,4,0]],
	'anthro-palm.glb': [[1,8,11,3],[7,15,13,5],[2,0,1,3],[4,6,7,5],[9,10,23,22],[14,12,21,20],[14,10,9,12],[17,19,18,16],[6,4,18,19],[5,13,21,12,9,22,8,1,0,16,18,4],[0,2,17,16],[20,21,13,15],[22,23,11,8],[3,11,23,10,14,20,15,7,6,19,17,2]],
}



class AnthroThumb extends GLTFPart
{
	constructor ( left, filename, length=1.4 )
	{
		super( filename, 0, recolor );
		
		this.flip = left ? 1 : -1;
		

		var slot = this.addSlot( 0, -0.2*length, 0.06*length );
			slot.setRotation( 0.5*Math.PI, (1-this.flip)*Math.PI/2, 0, 'XYZ' );
		
		
		filename = filename.split('/').pop();
		if( VERTICES[filename] && FACES[filename] )
		{
			
			// 3D convex shape
			var vertices = [...VERTICES[filename]];
			var faces = FACES[filename];
			
			// flip x coordinates of vertices and reverse order of faces
			if( !left )
			{
				vertices = vertices.map( v=>[-v[0],v[1],v[2]] );
				faces = faces.map( f=>f.toReversed() );
			}
			
			// physics
			this.physics = PHYSICS.convex( vertices, faces );
			this.physics.threejs = this;
			this.debugConvex( vertices, faces );
		
			PHYSICS.bodies.push( this );
		}


		var that = this;
		function recolor( )
		{
			// flip left/right palm
			that.mainMesh.scale.x *= that.flip;
		
			that.recolor( [0,0.21,1], [0.3,0.3,0.3] );
		}
	} // AnthroPalm.constructor
	
} // AnthroThumb


class AnthroPalm extends GLTFPart
{
	constructor ( left, filename, length=1.4 )
	{
		super( filename, length, recolor );
		
		this.flip = left ? 1 : -1;
		
		var slot = this.addSlot( 0.32*this.flip*length, 0.16*length, 0*length );
		slot.setRotation( 0.5*Math.PI, 0.75*Math.PI+(left?0:Math.PI/2), -0.500*this.flip*Math.PI, 'XYZ' );
		
		slot = this.addSlot( 0.36*this.flip*length, 1.13*length, -0.0*length );
		slot.setRotation( 0, Math.PI/2, -3*this.flip*Math.PI/180, 'ZXY' );
		
		slot = this.addSlot( 0.12*this.flip*length, 1.17*length, -0.0*length );
		slot.setRotation( 0, Math.PI/2, -this.flip*Math.PI/180, 'ZXY' );
		
		slot = this.addSlot( -0.12*this.flip*length, 1.16*length, -0.0*length );
		slot.setRotation( 0, Math.PI/2, 1*this.flip*Math.PI/180, 'ZXY' );

		slot = this.addSlot( -0.36*this.flip*length, 1.09*length, -0.0*length );
		slot.setRotation( 0, Math.PI/2, 3*this.flip*Math.PI/180, 'ZXY' );
		
		filename = filename.split('/').pop();
		if( VERTICES[filename] && FACES[filename] )
		{
			
			// 3D convex shape
			var vertices = [...VERTICES[filename]];
			var faces = FACES[filename];
			
			// flip x coordinates of vertices and reverse order of faces
			if( !left )
			{
				vertices = vertices.map( v=>[-v[0],v[1],v[2]] );
				faces = faces.map( f=>f.toReversed() );
			}
			
			// physics
			this.physics = PHYSICS.convex( vertices, faces );
			this.physics.threejs = this;
			this.debugConvex( vertices, faces );
		
			PHYSICS.bodies.push( this );
		}

		var that = this;
		function recolor( )
		{
			// flip left/right palm
			that.mainMesh.scale.x *= that.flip;
		
			that.recolor( [0,0.21,1], [0.3,0.3,0.3] );
		}
	} // AnthroPalm.constructor
	
} // AnthroPalm






export { AnthroPalm, AnthroThumb };